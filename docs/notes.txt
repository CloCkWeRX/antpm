// -*- mode: outline ; coding: utf-8-unix -*-


** LINUX USER'S GUIDE (from pre-built packages)
* Make sure that the cp210x kernel module is loaded: "sudo modprobe cp210x". Verify by looking at non-empty output of "lsmod | grep cp210x".
* Make sure that the USB2ANT stick is connected to the machine.
* Make sure cp210x driver was assigned to your USB2ANT. Verify by "dmesg | grep tty" and look for a line similar to: "[ 3274.854726] usb 6-2: cp210x converter now attached to ttyUSB0". Also make sure "ls /dev/ttyUSB*" lists your device node.
* Install the antpm binary package.
* Enable "pairing mode" on your watch.
* Bring your watch to ~50cm from the USB2ANT stick. Sometimes avoiding the proximity of a WiFi network helps.
* Run "antpm-downloader" on your machine. This will attempt connecting to the watch and pair with it first.
* During pairing, you have to click "Yes" on the watch to complete pairing.
* Afterwards all activity information from the watch is downloaded to your machine. This can take some time.
* The downloaded files are stored on your machine to the folder ConfigFolder/*device-id*/*current-date-time* (where ConfigFolder equals $XDG_CONFIG_HOME which usually points to $HOME/.config/antpm/ or $ANTPM_DIR/ if that is set).
* The 310XT stores all information in .fit files. These files can describe waypoints/tracks/activities.
* To convert the downloaded .fit files to a more commonly used .gpx format, issue the command "antpm-fit2gpx -F ConfigFolder/*device-id*/*current-date-time*" e.g. "antpm-fit2gpx -F ~/.config/antpm/4531082473/2013_03_26_10_58_19". This will populate the given folder with .gpx files.

** WINDOWS USER'S GUIDE (from pre-built packages)
* Make sure that the USB2ANT stick is connected to the machine.
* Install the libusb driver by running "3rd_party/libusb-win32-bin-1.2.6.0/driver_installer/inf-wizard.exe"
* 

** HOW TO HELP IF YOUR WATCH IS NOT PROPERLY HANDLED BY ANT+minus
* In this case your device talks a different dialect of ANT/ANT+/ANT-FS that we've seen so far.
* To solve this, we'll need a dump of the USB communication between your watch (USB2ANT stick) and garmin's ant agent. This may be facilitated in a VirtualBox environment.
* Install e.g. VirtualBox on linux, including proprietary oracle usb extensions
* Install win xp in vbox, set up usb filter to pass through all devices
* Install garmin's ant agent in virtual xp, but do not start it!
* Plug in your USB2ANT stick to the host, make sure the cp201x driver didn't grab it, by unloading cp201x kernel module.
* Under linux host, figure out usb bus address of your USB2ANT stick: "lsusb"
* Increase usbmon lower threshold for message truncation to say 100 characters: ./usbmon -i <USB bus> -fu -s 100
* Start capturing usb traffic under linux host: cat /sys/kernel/debug/usb/usbmon/6u > ~/ant-usb-log-001.usbmon
* Start garmin's ant agent in virtual xp. Once the download is done, quit ant agent. Also terminate the above "cat" process. The dump of your usb communication is not saved to ~/ant-usb-log-001.usbmon.
* decode the ANT traffic from the usb packets: ./antpm-usbmon2ant --op=parse ~/ant-usb-log-001.usbmon
* At this point, you can either start debugging antpm and try to see where our code sends/awaits different replies/messages, or you may provide the .usbmon file to the maintainers to do the same. Note that the dump file most likely contains your activities from your watch, and could be of personal nature!!


** RELEASE CHECKLIST
* make sure all files are listed in scripts/origsrc-file-list
* update version in scripts/make-tarball
* run scripts/make-tarball
* update version in scrips/make-changelog
* run scrips/make-changelog
* run scrips/deb
* commit above changes and tag respective version

** FEATURES
* usbmon => ANT message decoder
* many ANT,ANT-FS messages implemented
* cp201x linux GPLv2 kernel driver partially ported to userspace and windows
* ANTFS linking
* ANTFS S/N retrieval
* ANTFS authentication
* ANTFS download file
* ANTFS erase file
* It generally helps to keep the watch close (20-30 cm) to the USB2ANT dongle while communicating.

** TODO
* capture ant agent log: for downloading all, for erasing, for uploading
* capture ant agent log: for firmware upload
* fix all TODO/FIXME in the code
* resume downloader connections
* split ANT framing / messaging functionality into two separate classes
* send specific messages at the channel period??
* ANTFS erase downloaded files (check ant agent logs for this)
* ANTFS upload more waypoints??
* save .fit files with correct date
* Ctrl-C doesn't abort file downloads, as those are done in a tight loop inside the state machine...

** DONE
* ANTFS pairing
* eliminate delays due to threading
* check CRC during downloading
* fix delays in threading, avoid waiting at exit
* directory parsing
* decoding downloaded FIT workout files
* download a particular file
* write all logs into %DATE% folder

** PLAN
* install vbox on linux, including proprietary oracle usb extensions
* install xp in vbox, set up usb filter to pass through all devices
* install all garmin blobs in xp
* increase usbmon lower threshold for message truncation: ./usbmon -i <USB bus> -fu -s 100
* capture usb traffic under linux host while xp communicates with 310xt (usbmon+wireshark): cat /sys/kernel/debug/usb/usbmon/6u
* decode the ANT traffic from the usb packets: ./usbmon2ant.exe --op=parse ../../../gant-priv/traces/2012_09_15_0001.usbmon
* reproduce ANT traffic from our code
* diff our traffic against garmin blob traffic


** ISSUES
*** usbmon truncates output to 32 bytes http://mrmekon.tumblr.com/post/5146693470/usbmon-truncation
The USB debug driver, usbmon, truncates the ‘u’ format devices to 32 bytes by default!

It turns out this can be set with an ioctl.  Which doesn’t work too well with cat, our information-gatherer of choice.

But there’s a nice guy at Red Hat who makes a proper usbmon command-line utility that supports all of its various ioctl options.  Using his ‘usbmon’ tool, you can get a nice, untruncated output with:

    ./usbmon -i <USB bus> -fu -s 100



** LINKS
http://gitorious.org/~tade
http://www.andreas-diesner.de/garminplugin/doku.php
http://code.google.com/p/linuxgarminimport/
http://www.gpspassion.com/forumsen/topic.asp?TOPIC_ID=124627&whichpage=3
http://dropoff.tumblr.com/post/505336492/garmin-connect-running-on-ubuntu-linux
http://cgit.get-open.com//cgit.cgi/gant/
git://get-open.com/gant
http://www.thefloatingfrog.co.uk/geek-hobbies/garmin-forerunner-305405-musings/#comment-3432
http://code.google.com/p/antwireless/w/list
http://code.google.com/p/garmintools/
http://git.debian.org/?p=pkg-running/garmin-forerunner-tools.git;a=summary
http://www.usblyzer.com/download.htm
http://www.sbrk.co.uk/t6/
http://developer.garmin.com/forum/viewtopic.php?t=354
http://www.garmin.com/support/pdf/IOSDK.zip

http://bryars.eu/projects/garmin-forerunner-decoder/

http://www.waite.net.nz/downloads/
http://www.waite.net.nz/downloads/garmin-upload-tools_1.4.0.tar.gz

https://forums.garmin.com/showthread.php?t=14598 Getting The Garmin Forerunner 410 to work in UBUNTU

http://developer.garmin.com/web/communicator-api/

http://packages.debian.org/source/sid/garmin-ant-downloader


http://vusb-analyzer.sourceforge.net/


http://frant.sf.net

http://braiden.org/?p=293
http://www.youtube.com/playlist?list=PLA4AA10B39DB19291&feature=plcp
https://github.com/braiden/python-ant-downloader
https://github.com/Tigge/Garmin-Forerunner-610-Extractor

http://sportwatcher.googlecode.com/svn/trunk/

http://sourceforge.net/projects/pytrainer/
http://sourceforge.net/projects/turtlesport/?source=recommended
http://sourceforge.net/projects/sportwatcher/?source=recommended
http://sourceforge.net/projects/sportstracker/?source=recommended
